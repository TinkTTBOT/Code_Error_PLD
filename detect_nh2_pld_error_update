import argparse
import pandas as pd
import math
import os
import zipfile
from pathlib import Path
import xml.etree.ElementTree as ET
from openpyxl import Workbook
from math import sqrt, pow


def clean_arg(arg: str | None, default: str | None = None):
    if arg is None:
        return default
    elif arg[-1] == '"':
        return arg[:-1]
    else:
        return arg

def unzipping_data():
    path = Path("xml")
    data_path = path / "task_exports"

    with zipfile.ZipFile(path / "task exports.zip", "r") as zip_ref:
        zip_ref.extractall(data_path)

def cross_product(x1, y1, x2, y2):
    return x1 * y2 - y1 * x2

def check_intersection(A, B, C, D):
    x1, y1 = A
    x2, y2 = B
    x3, y3 = C
    x4, y4 = D

    d1 = cross_product(x2 - x1, y2 - y1, x3 - x1, y3 - y1)
    d2 = cross_product(x2 - x1, y2 - y1, x4 - x1, y4 - y1)
    d3 = cross_product(x4 - x3, y4 - y3, x1 - x3, y1 - y3)
    d4 = cross_product(x4 - x3, y4 - y3, x2 - x3, y2 - y3)

    if d1 * d2 < 0 and d3 * d4 < 0:
        return True
    return False

def point_split(point_str):
    points = point_str.split(';')
    return [(float(x), float(y)) for x, y in (point.split(',') for point in points)]

def make_instance_id(start_time: str, instance_id: int):
    # Example output: '20210711_121927_0000' with instance_id 1
    return f'{start_time}_{instance_id:04d}'

def get_attribute(element: ET.Element, name: str):
    sub_element = element.find(f"attribute[@name='{name}']")
    if sub_element is not None:
        if sub_element.text is not None:
            return sub_element.text
        else:
            return ''
    raise ValueError(f'attribute with name "{name}" not found')

def check_A_task(image: ET.Element):
    control_line = image.find("polyline[@label='CONTROL_LINE']")
    if control_line is not None:
        control_line_points = point_split(control_line.attrib['points'])
        p3, p4 = control_line_points[0], control_line_points[1]
        # print("Control_line: {}".format(control_line_points))

        # Check intersection of Control line and Line list
        for line_list in image.findall("polyline[@label='LINE_LIST']"):
            line_list_points = point_split(line_list.attrib['points'])
            polyline_id = get_attribute(line_list, 'INSTANCE_ID')
            # print(polyline_id, line_list_points)
            p1, p2 = line_list_points[0], line_list_points[1]
            if check_intersection(p1, p2, p3, p4):
                raise ValueError("Control line cắt qua Line ID {}".format(polyline_id))

def split_line_pair(line_pair_text):
    global line_pair_split
    if "," in line_pair_text:
        line_pair_split = line_pair_text.split(",")
    if "." in line_pair_text:
        line_pair_split = line_pair_text.split(".")
    if "/" in line_pair_text:
        line_pair_split = line_pair_text.split("/")

    return line_pair_split


def check_image(image: ET.Element, username, task_name, image_id, image_name):
    # box_sm = image.find("box[@label='SEQUENCE_METADATA']")
    # start_time = get_attribute(box_sm, 'START_TIME')

    # The exact value of start_time isn't important when error checking,
    # so using a placeholder in case SEQUENCE_METADATA does not exist
    errors = []
    start_time = '00000000_000000'
    # ================= LINE LIST ========================
    used_ids = set()
    for line in image.findall("polyline[@label='LINE_LIST']"):
        line_list_points = point_split(line.attrib['points'])
        line_list_text = get_attribute(line, 'INSTANCE_ID')
        junction_type = get_attribute(line, 'JUNCTION_TYPE')
        line_type = get_attribute(line, 'LINE_TYPE')

        # Check Line list ID
        instance_id = int(line_list_text)
        if instance_id in used_ids:
            error = {
                "Username": username,
                "TaskName": task_name,
                "ImageID": image_id,
                "ImageName": image_name,
                "Error": "Line ID {} trùng".format(line_list_text)
            }
            errors.append(error)
        used_ids.add(instance_id)

        # Occluded unknown
        if line_type == "[1]Occluded or erased":
            if junction_type != "[11]Unknown":
                error = {
                    "Username": username,
                    "TaskName": task_name,
                    "ImageID": image_id,
                    "ImageName": image_name,
                    "Error": "Line ID {} sai thuộc tính".format(line_list_text)
                }
                errors.append(error)
        # Checking 30px
        p1, p2 = line_list_points[0], line_list_points[1]
        distance = sqrt(pow(p1[0] - p2[0], 2) + pow(p1[1] - p2[1], 2))
        if distance < 29.9:
            error = {
                "Username": username,
                "TaskName": task_name,
                "ImageID": image_id,
                "ImageName": image_name,
                "Error": "Line ID {} chưa đủ 30px".format(line_list_text)
            }
            errors.append(error)

    # ================= LINE PAIR ========================
    used_line_pairs = set()
    for line_pair in image.findall("box[@label='LINE_PAIR_LIST']"):
        line_pair_text = get_attribute(line_pair, 'LINE_PAIR')

        # Check Line pair list ID
        if line_pair_text == '':
            error = {
                "Username": username,
                "TaskName": task_name,
                "ImageID": image_id,
                "ImageName": image_name,
                "Error": "Thiếu Line pair ID"
            }
            errors.append(error)
        else:
            line_pair_split = split_line_pair(line_pair_text)
            if line_pair_split:
                if len(line_pair_split) != 2:
                    error = {
                        "Username": username,
                        "TaskName": task_name,
                        "ImageID": image_id,
                        "ImageName": image_name,
                        "Error": "Line pair ID phải có 2 giá trị: {}".format(line_pair_text)
                    }
                    errors.append(error)
                try:
                    line_pair_ids = [make_instance_id(start_time, int(idx)) for idx in line_pair_split]
                    sorted_line_pair_ids = tuple(sorted([int(i) for i in line_pair_ids]))
                    for i in sorted_line_pair_ids:
                        if i not in used_ids:
                            error = {
                                "Username": username,
                                "TaskName": task_name,
                                "ImageID": image_id,
                                "ImageName": image_name,
                                "Error": "Không tồn tại line ID {} trong line pair {}".format(i,sorted_line_pair_ids)
                            }
                            errors.append(error)
                    if sorted_line_pair_ids in used_line_pairs:
                        error = {
                            "Username": username,
                            "TaskName": task_name,
                            "ImageID": image_id,
                            "ImageName": image_name,
                            "Error": "Line pair {} trùng".format(sorted_line_pair_ids)
                        }
                        errors.append(error)
                    used_line_pairs.add(sorted_line_pair_ids)
                except TypeError:
                    error = {
                        "Username": username,
                        "TaskName": task_name,
                        "ImageID": image_id,
                        "ImageName": image_name,
                        "Error": "Line pair ID phải là số: {}".format(line_pair_text)
                    }
                    errors.append(error)
            else:
                error = {
                    "Username": username,
                    "TaskName": task_name,
                    "ImageID": image_id,
                    "ImageName": image_name,
                    "Error": "Line pair không đúng định dạng: {}".format(line_pair_text)
                }
                errors.append(error)

    # ================= CONTROL LINE ========================
    control_line = image.find("polyline[@label='CONTROL_LINE']")
    if control_line is not None:
        control_line_points = point_split(control_line.attrib['points'])
        p3, p4 = control_line_points[0], control_line_points[1]

        # Check intersection of Control line and Line list
        for line_list in image.findall("polyline[@label='LINE_LIST']"):
            line_list_points = point_split(line_list.attrib['points'])
            line_list_text = get_attribute(line_list, 'INSTANCE_ID')
            p1, p2 = line_list_points[0], line_list_points[1]
            if check_intersection(p1, p2, p3, p4):
                error = {
                    "Username": username,
                    "TaskName": task_name,
                    "ImageID": image_id,
                    "ImageName": image_name,
                    "Error": "Control line cắt qua Line ID {}".format(line_list_text)
                }
                errors.append(error)

    return errors

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input', help='input directory for BlackOlive XML files')
    parser.add_argument('-o', '--output', help='output Excel workbook, listing errors', default='./errors.xlsx')
    args = parser.parse_args()

    unzipping_data()
    input_dir = clean_arg(args.input)
    output_xlsx = clean_arg(args.output)

    # Loop through each XML file in the input directory and its subdirectories
    all_errors = []
    total_files = 0
    for input_xml in Path(input_dir).glob('**/*.xml'):
        # Parse the input XML file
        total_files += 1
        tree = ET.parse(input_xml)
        root = tree.getroot()

        task_name = root.find('meta/task/name').text
        try:
            username = root.find("meta/task/assignee/username").text
        except:
            username = root.find("meta/task/owner/username").text

        # Iterate through each image tag in the XML
        for image in root.findall('image'):
            image_id = int(image.get('id')) + 1  # 0 ~ 499 -> 1 ~ 500
            image_name = Path(image.get('name')).name  # leave out directory paths
            errors = check_image(image, username, task_name, image_id, image_name)
            all_errors.extend(errors)

    # Save workbook to file
    df = pd.DataFrame(all_errors)
    df.to_excel("errors.xlsx", index=False)
    annotators = [item["Username"] for item in all_errors]

    print("Tổng số task đã xử lý: {}".format(total_files))
    if len(set(annotators)) != 0:
        print("Có {} lỗi xuất hiện ở task của: {}".format(len(set(annotators)), ', '.join(set(annotators))))
        # Open Excel file
        while True:
            user_input = input("Bạn có muốn mở file errors.xlsx không? (y/n) ").strip().lower()
            if user_input in ['y', 'n']:
                if user_input == 'y':
                    os.startfile(os.path.abspath(args.output))
                    break
                else:
                    break
            else:
                break
    else:
        print("Không có lỗi!")
    print("=============================================")

if __name__ == "__main__":
    main()
